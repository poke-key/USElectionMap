@page "/election-map"
@inject IJSRuntime JSRuntime
@inject ElectionDataService ElectionDataService

<h3>US Election Map</h3>

<div class="year-slider">
    <label for="year-slider">Select Year: </label>
    <input type="range" id="year-slider" min="2000" max="2020" step="4" @bind="SelectedYear" @bind:after="LoadData" />
    <span>@SelectedYear</span>
</div>

<div class="legend">
    <div class="legend-item">
        <div class="legend-color" style="background-color: #0000FF;"></div>
        <span>Democrat >60%</span>
    </div>
    <div class="legend-item">
        <div class="legend-color" style="background-color: #4169E1;"></div>
        <span>Democrat 50-60%</span>
    </div>
    <div class="legend-item">
        <div class="legend-color" style="background-color: #ADD8E6;"></div>
        <span>Democrat 40-50%</span>
    </div>
    <div class="legend-item">
        <div class="legend-color" style="background-color: #FFCCCB;"></div>
        <span>Democrat 30-40%</span>
    </div>
    <div class="legend-item">
        <div class="legend-color" style="background-color: #FF0000;"></div>
        <span>Republican >60%</span>
    </div>
</div>

<div id="map" style="height: 600px; width: 100%;"></div>

@code {
    private List<int> Years = new List<int> { 2000, 2004, 2008, 2012, 2016, 2020 };
    private int SelectedYear = 2020;
    private List<ElectionResult> electionData;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeMap");
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        electionData = await ElectionDataService.GetElectionDataAsync(SelectedYear);
        await JSRuntime.InvokeVoidAsync("updateMap", electionData);
    }
}